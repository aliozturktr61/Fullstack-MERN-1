{"ast":null,"code":"import * as types from \"../actions/types\";\nconst initialState = {\n  posts: [],\n  currentPost: null\n};\nconst postReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.FETCH_POSTS:\n      return {\n        ...state,\n        posts: action.payload\n      };\n    case types.FETCH_SINGLE_POST:\n      return {\n        ...state,\n        currentPost: action.payload\n      };\n    case types.CREATE_POST:\n      return {\n        ...state,\n        posts: [...state.posts, action.payload]\n      };\n    case types.UPDATE_POST:\n      return {\n        ...state,\n        posts: state.posts.map(post => {\n          if (post._id === action.payload._id) {\n            return action.payload;\n          } else {\n            return post;\n          }\n        }),\n        currentPost: action.payload\n      };\n    case types.DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter(post => post._id !== action.payload),\n        currentPost: null\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default postReducer;","map":{"version":3,"names":["types","initialState","posts","currentPost","postReducer","state","action","type","FETCH_POSTS","payload","FETCH_SINGLE_POST","CREATE_POST","UPDATE_POST","map","post","_id","DELETE_POST","filter"],"sources":["/Users/aliozturk/Desktop/mernpro1/client/src/redux/reducers/post.js"],"sourcesContent":["import * as types from \"../actions/types\";\n\nconst initialState = {\n  posts: [],\n  currentPost: null,\n};\n\nconst postReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.FETCH_POSTS:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n    case types.FETCH_SINGLE_POST:\n      return {\n        ...state,\n        currentPost: action.payload,\n      };\n    case types.CREATE_POST:\n      return {\n        ...state,\n        posts: [...state.posts, action.payload],\n      };\n    case types.UPDATE_POST:\n      return {\n        ...state,\n        posts: state.posts.map((post) => {\n          if (post._id === action.payload._id) {\n            return action.payload;\n          } else {\n            return post;\n          }\n        }),\n        currentPost: action.payload,\n      };\n    case types.DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter((post) => post._id !== action.payload),\n        currentPost: null,\n      };\n    default:\n      return {\n        ...state,\n      };\n  }\n};\n\nexport default postReducer;"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,kBAAkB;AAEzC,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,EAAE;EACTC,WAAW,EAAE;AACf,CAAC;AAED,MAAMC,WAAW,GAAGA,CAACC,KAAK,GAAGJ,YAAY,EAAEK,MAAM,KAAK;EACpD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKP,KAAK,CAACQ,WAAW;MACpB,OAAO;QACL,GAAGH,KAAK;QACRH,KAAK,EAAEI,MAAM,CAACG;MAChB,CAAC;IACH,KAAKT,KAAK,CAACU,iBAAiB;MAC1B,OAAO;QACL,GAAGL,KAAK;QACRF,WAAW,EAAEG,MAAM,CAACG;MACtB,CAAC;IACH,KAAKT,KAAK,CAACW,WAAW;MACpB,OAAO;QACL,GAAGN,KAAK;QACRH,KAAK,EAAE,CAAC,GAAGG,KAAK,CAACH,KAAK,EAAEI,MAAM,CAACG,OAAO;MACxC,CAAC;IACH,KAAKT,KAAK,CAACY,WAAW;MACpB,OAAO;QACL,GAAGP,KAAK;QACRH,KAAK,EAAEG,KAAK,CAACH,KAAK,CAACW,GAAG,CAAEC,IAAI,IAAK;UAC/B,IAAIA,IAAI,CAACC,GAAG,KAAKT,MAAM,CAACG,OAAO,CAACM,GAAG,EAAE;YACnC,OAAOT,MAAM,CAACG,OAAO;UACvB,CAAC,MAAM;YACL,OAAOK,IAAI;UACb;QACF,CAAC,CAAC;QACFX,WAAW,EAAEG,MAAM,CAACG;MACtB,CAAC;IACH,KAAKT,KAAK,CAACgB,WAAW;MACpB,OAAO;QACL,GAAGX,KAAK;QACRH,KAAK,EAAEG,KAAK,CAACH,KAAK,CAACe,MAAM,CAAEH,IAAI,IAAKA,IAAI,CAACC,GAAG,KAAKT,MAAM,CAACG,OAAO,CAAC;QAChEN,WAAW,EAAE;MACf,CAAC;IACH;MACE,OAAO;QACL,GAAGE;MACL,CAAC;EACL;AACF,CAAC;AAED,eAAeD,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}